cmake_minimum_required(VERSION 3.1.0)

if (EXISTS SGXSSL_SDK)
    set(SGXSSL_PATH ${SGXSSL_SDK})
    message(STATUS "SGXSSL_PATH(VAR) - ${SGXSSL_PATH}")
elseif (EXISTS $ENV{SGXSSL_SDK})
    set(SGXSSL_PATH $ENV{SGXSSL_SDK})
    message(STATUS "SGXSSL_PATH(ENV) - ${SGXSSL_PATH}")
else ()
    set(SGXSSL_PATH "/opt/intel/sgxssl")
    message(STATUS "SGXSSL_PATH(DEF) - ${SGXSSL_PATH}")
endif ()

find_path(SGXSSL_INCLUDE_DIR tSgxSSL_api.h "${SGXSSL_PATH}/include" NO_DEFAULT_PATH)
find_path(SGXSSL_LIBRARY_DIR libsgx_tsgxssl.a "${SGXSSL_PATH}/lib64" NO_DEFAULT_PATH)
find_library(SGX_tSGXSSL libsgx_tsgxssl.a ${SGXSSL_LIBRARY_DIR})
find_library(SGX_tSGXSSL_CRYPTO libsgx_tsgxssl_crypto.a ${SGXSSL_LIBRARY_DIR})
find_library(SGX_uSGXSSL libsgx_usgxssl.a ${SGXSSL_LIBRARY_DIR})

if(SGXSSL_INCLUDE_DIR AND SGXSSL_LIBRARY_DIR)
    set(SGX_SSL_FOUND "YES")
    set(SGXSSL_INCLUDE_DIR "${SGXSSL_PATH}/include" CACHE PATH "Intel SGX SSL include directory" FORCE)
    set(SGXSSL_LIBRARY_DIR "${SGXSSL_PATH}/lib64" CACHE PATH "Intel SGX SSL library directory" FORCE)
    mark_as_advanced(SGXSSL_INCLUDE_DIR SGXSSL_LIBRARY_DIR)
    message(STATUS "Found Intel SGX SSL SDK.")
endif()